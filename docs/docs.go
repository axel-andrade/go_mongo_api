// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "description": "Autentica o usuário com email e senha.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Autenticação de usuário",
                "parameters": [
                    {
                        "description": "Corpo da solicitação",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/login.LoginInputDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.LoginOutputFormatted"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/shared_err.InvalidOperationError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/shared_err.InternalError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signup": {
            "post": {
                "description": "Register an user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "Corpo da solicitação",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/signup.SignupInputDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common_ptr.UserFormatted"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/shared_err.InvalidOperationError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/shared_err.InternalError"
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "description": "Returns a list of users from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenters.GetUsersOutputFormatted"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/shared_err.InvalidOperationError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/shared_err.InternalError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common_ptr.PaginateResult": {
            "type": "object",
            "properties": {
                "has_next_page": {
                    "type": "boolean",
                    "example": true
                },
                "has_prev_page": {
                    "type": "boolean",
                    "example": true
                },
                "limit": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1,
                    "example": 20
                },
                "next_page": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 2
                },
                "page": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "prev_page": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 50
                },
                "total_pages": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 50
                }
            }
        },
        "common_ptr.UserFormatted": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2022-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "123"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2022-01-01T01:00:00Z"
                }
            }
        },
        "login.LoginInputDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "presenters.GetUsersOutputFormatted": {
            "type": "object",
            "properties": {
                "pagination": {
                    "$ref": "#/definitions/common_ptr.PaginateResult"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common_ptr.UserFormatted"
                    }
                }
            }
        },
        "presenters.LoginOutputFormatted": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                },
                "refresh": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                },
                "user": {
                    "$ref": "#/definitions/common_ptr.UserFormatted"
                }
            }
        },
        "shared_err.InternalError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "internal error"
                }
            }
        },
        "shared_err.InvalidOperationError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "incorrect password"
                }
            }
        },
        "signup.SignupInputDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
